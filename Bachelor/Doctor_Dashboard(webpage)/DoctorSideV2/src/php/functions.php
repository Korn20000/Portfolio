<?phpinclude_once 'psl-config.php';function sec_session_start(){	$session_name = 'sec_session_id'; // Set a custom session name	$secure = SECURE;	// This stops JavaScript being able to access the session id.	$httponly = true;	// Forces sessions to only use cookies.	if (ini_set('session.use_only_cookies', 1) === FALSE) {		header("Location: /error.php?err=Could not initiate a safe session (ini_set)");		exit();	}	// Gets current cookies params.	$cookieParams = session_get_cookie_params();	session_set_cookie_params($cookieParams["lifetime"], $cookieParams["path"], $cookieParams["domain"], $secure, $httponly);	// Sets the session name to the one set above.	session_name($session_name);	session_start(); // Start the PHP session	session_regenerate_id(); // regenerated the session, delete the old one.}function login($email, $password, $mysqli_doctors){	// Using prepared statements means that SQL injection is not possible.	if ($stmt = $mysqli_doctors->prepare("SELECT id, username, password, salt FROM members WHERE email = ? LIMIT 1")) {		$stmt->bind_param('s', $email); // Bind "$email" to parameter.		$stmt->execute(); // Execute the prepared query.		$stmt->store_result();		// get variables from result.		$stmt->bind_result($user_id, $username, $db_password, $salt);		$stmt->fetch();		// hash the password with the unique salt.		$password = hash('sha512', $password . $salt);		if ($stmt->num_rows == 1) {			// If the user exists we check if the account is locked			// from too many login attempts			if (checkbrute($user_id, $mysqli_doctors) == true) {				// Account is locked				return 'locked';			}			else {				// Check if the password in the database matches				// the password the user submitted.				if ($db_password == $password) {					// Password is correct!					// Get the user-agent string of the user.					$user_browser = $_SERVER['HTTP_USER_AGENT'];					// XSS protection as we might print this value					$user_id = preg_replace("/[^0-9]+/", "", $user_id);					$_SESSION['user_id'] = $user_id;					// XSS protection as we might print this value					$username = preg_replace("/[^a-zA-Z0-9_\-]+/", "", $username);					$_SESSION['username'] = $username;					$_SESSION['login_string'] = hash('sha512', $password . $user_browser);					// Login successful.					return 'ok';				}				else {					// Password is not correct					// We record this attempt in the database					$now = time();					if (!$mysqli_doctors->query("INSERT INTO login_attempts(user_id, time) VALUES ('$user_id', '$now')")) {						header("Location: ../error.php?err=Database error: login_attempts");						exit();					}					return 'bad_pwd';				}			}		}		else {			return 'no_email';		}	}	else {		header("Location: /error.php?err=Database error: cannot prepare statement login" + $mysqli_doctors->error);		exit();	}}function checkbrute($user_id, $mysqli_doctors){	// Get timestamp of current time	$now = time();	// All login attempts are counted from the past 2 hours.	$valid_attempts = $now - (2 * 60 * 60);	if ($stmt = $mysqli_doctors->prepare("SELECT time FROM login_attempts WHERE user_id = ? AND time > '$valid_attempts'")) {		$stmt->bind_param('i', $user_id);		// Execute the prepared query.		$stmt->execute();		$stmt->store_result();		// If there have been more than 15 failed logins		if ($stmt->num_rows > 15) {			return true;		}		else {			return false;		}	}	else {		// Could not create a prepared statement		header("Location: /error.php?err=Database error: cannot prepare statement checkbrute");		exit();	}}function login_check($mysqli_doctors){	// Check if all session variables are set	if (isset($_SESSION['user_id'], $_SESSION['username'], $_SESSION['login_string'])) {		$user_id = $_SESSION['user_id'];		$login_string = $_SESSION['login_string'];		$username = $_SESSION['username'];		// Get the user-agent string of the user.		$user_browser = $_SERVER['HTTP_USER_AGENT'];		if ($stmt = $mysqli_doctors->prepare("SELECT password FROM members WHERE id = ? LIMIT 1")) {			// Bind "$user_id" to parameter.			$stmt->bind_param('i', $user_id);			$stmt->execute(); // Execute the prepared query.			$stmt->store_result();			if ($stmt->num_rows == 1) {				// If the user exists get variables from result.				$stmt->bind_result($password);				$stmt->fetch();				$login_check = hash('sha512', $password . $user_browser);				if ($login_check == $login_string) {					// Logged In!!!!					return true;				}				else {					// Not logged in					return false;				}			}			else {				// Not logged in				return false;			}		}		else {			// Could not prepare statement			header("Location: /error.php?err=Database error: cannot prepare statement login_check");			exit();		}	}	else {		// Not logged in		return false;	}}function get_patients($mysqli_patients){	// Prepare statement	if ($stmt = $mysqli_patients->prepare("SELECT * FROM `Patient_DataV2`")) {		$stmt->execute();		$result = $stmt->get_result();		$patients_array = array();		// Loop through result add all rows to output		while ($row = mysqli_fetch_assoc($result)) {			array_push($patients_array, $row);		}		return json_encode($patients_array);	}	else {		// Could not prepar a statement		header("Location: /error.php?err=Database error: cannot prepare statement get_patients");		exit();	}}function get_patients_history($mysqli_patients, $cpr){	//echo '<script>console.log("get_patients_history PHP called")</script>';	if ($stmt = $mysqli_patients->prepare("SELECT * FROM `Patient_Measurement_HistoryV3` WHERE `fk_CPR` = '$cpr'")) {		//$stmt->bind_param('i', $cpr);		// Execute the prepared query.		$stmt->execute();		//$stmt->store_result();		$result = $stmt->get_result();		$history_array = array();		// Loop through result add all rows to output		while ($row = mysqli_fetch_assoc($result)) {			array_push($history_array, $row);		}		return json_encode($history_array);	}	else {		// Could not prepar a statement		header("Location: /error.php?err=Database error: cannot prepare statement patient_history");		exit();	}}function save_measurement_db($mysqli_patients, $cpr, $level){	if ($stmt = $mysqli_patients->prepare("INSERT INTO `Patient_Measurement_HistoryV3` (`ID`, `fk_CPR`, `Measured_Level`, `Date`) VALUES (NULL, '$cpr', '$level', CURRENT_TIMESTAMP)")) {		$stmt->execute();	}	else {		// Could not prepar a statement		echo "Error in statement preparation !";		exit();	}}function esc_url($url){	if ('' == $url) {		return $url;	}	$url = preg_replace('|[^a-z0-9-~+_.?#=!&;,/:%@$\|*\'()\\x80-\\xff]|i', '', $url);	$strip = array(		'%0d',		'%0a',		'%0D',		'%0A'	);	$url = (string)$url;	$count = 1;	while ($count) {		$url = str_replace($strip, '', $url, $count);	}	$url = str_replace(';//', '://', $url);	$url = htmlentities($url);	$url = str_replace('&amp;', '&#038;', $url);	$url = str_replace("'", '&#039;', $url);	if ($url[0] !== '/') {		// We're only interested in relative links from $_SERVER['PHP_SELF']		return '';	}	else {		return $url;	}}